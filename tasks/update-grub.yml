---
# Update a hosts grub configuration.
#
# This role will configure a host to load the speified kernel version using grub.
# If no version is requested it will configure the host to load the most recent
# kernel.
#
# We configure the host by adding files to /etc/default/grub.d/ with .cfg extention.
# This will override any values set in /etc/default/grub.
#
# This task list does not include reboot-and-wait.yml. That should get done
# by task lists that include this file (update-grub.yml) if reboot is needed.
#
# What follows is the list of variables expected to get set before including
# this task file as well as variables set by this task file that will be
# available after it has run. This is more for maintainers for the role
# than users of the role.
#
# OPTIONAL INPUT VARIABLES:
#
#  kernel_update_grub_requested_kernel_version - the kernel version to have
#  the host boot with. This should be a value you would want to see when
#  runing `uname -r` after the machine is configured and restarted.
#
# SETS:
#
#  kernel_update_grub_latest_kernel_version - the latest kernel version
#  available to boot with.
#
#  kernel_update_grub_kernel_versions - a list of all the kernel versions
#  currently availbe to boot with on the host.
#
#  kernel_update_grub_default - the value used to set GRUB_DEFAULT in the
#  grub configuration file.
#
#  ku_grub_configuration_changed - boolean indicating if there was a grub
#  configuration change. this is separate from the update_grub result.
#
#  ku_update_grub_changed - a boolean indicating the result of updating grub
#  after a configuration change. May be useful if users need to trigger a reboot
#  after running update-grub.

- name: Fail if not a new release of Ubuntu
  fail: msg="{{ ansible_distribution_version }} is not an acceptable version of Ubuntu for this role"
  when: "ansible_distribution_version not in ['12.04', '14.04']"

# run update-grub to ensure /boot/grub/grub.cfg is up to date. This allows us to
# reasonably assume any kernel we find in the grub configuration is still a good choice.
- name: Update grub
  command: update-grub

# This command works on grub 1.99 & 2.02 and does not contain extra '\' to work
# with ansible so it can be copy pasted and work on a live box.
# At least one entry should exist or this will error out, but any running machine
# should have at least one kernel available.
# **RUN EVEN IN CHECKMODE**
- name: get kernel releases in sorted order
  shell: 'cat /boot/grub/grub.cfg | grep menuentry | grep -oP \\d+\\.\\d+\\.\\d+-\\d+-\\w+ | sort -V -r | uniq'
  register: ku_kernel_releases
  always_run: yes

- name: set kernel_update_grub_latest_kernel_version to the latest kernel
  set_fact:
   kernel_update_grub_kernel_versions: "{{ ku_kernel_releases.stdout.splitlines() }}"
   kernel_update_grub_latest_kernel_version: "{{ ku_kernel_releases.stdout.splitlines()[0] }}"

# TODO add regex to confirm results are valid kernel versions.

- name: check that kernel_update_grub_requested_kernel_version is in the list of available kernels if defined
  fail: msg="kernel_update_grub_requested_kernel_version is not a valid kernel"
  when: kernel_update_grub_requested_kernel_version is defined
    and kernel_update_grub_requested_kernel_version not in kernel_update_grub_kernel_versions

- include: set-grub-default_14_04.yml
  when: ansible_distribution_version in ['14.04']
    and kernel_update_grub_requested_kernel_version is defined

- include: set-grub-default_12_04.yml
  when: ansible_distribution_version in ['12.04']
    and kernel_update_grub_requested_kernel_version is defined

# files located in this directory with a *.cfg extension
# have precedence over the configuration in /etc/default/grub
# https://bugs.launchpad.net/ubuntu/+source/grub2/+bug/901600
- name: Create /etc/default/grub.d
  file:
    dest: /etc/default/grub.d
    group: root
    owner: root
    mode: 0755
    state: directory

- name: Render grub default configuration
  template:
    src: grub_default.j2
    dest: "/etc/default/grub.d/{{ kernel_update_config_prefix_grub_default }}-grub-default.cfg"
    group: root
    owner: root
    mode: 0644
  register: ku_render_grub_default_result
  when: kernel_update_grub_default is defined

# This file should only exist when we don't want the most recent kernel.
# we're assuming that /etc/default/grub has GRUB_DEFAULT=0 and we want to
# remove existing additional configuration for this value if there is any
# when we want grub to boot the most recent kernel.
- name: Remove grub default configuration if kernel_update_grub_default isn't set
  file:
    dest: "/etc/default/grub.d/{{ kernel_update_config_prefix_grub_default }}-grub-default.cfg"
    state: absent
  register: ku_remove_grub_default_result
  when: kernel_update_grub_default is not defined

- set_fact:
    ku_grub_configuration_changed: "{{ ku_render_grub_default_result|changed or ku_remove_grub_default_result|changed }}"

- name: Update grub
  command: update-grub
  register: ku_update_grub_result
  when: ku_grub_configuration_changed

- set_fact:
    ku_update_grub_changed: "{{ ku_update_grub_result|changed }}"